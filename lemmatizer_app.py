import streamlit as st
from pymorphy3 import MorphAnalyzer
import re

st.title("üå∏ –õ–µ–º–º–∞—Ç–∏–∑–∞—Ç–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")

try:
    morph = MorphAnalyzer()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    st.stop()

def is_russian(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    russian_letters = re.compile(r'^[–∞-—è–ê-–Ø—ë–Å\s\d\.,!?;:-]+$')
    return bool(russian_letters.fullmatch(text))

def is_real_word(word):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    parsed = morph.parse(word)
    if not parsed:
        return False
    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∞ UNKN (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ)
    return any('UNKN' not in p.tag for p in parsed)

text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
                   "–ì–∞—Ä—Ä–∏ –Ω–∏–∫–æ–≥–¥–∞ –µ—â–µ —Ç–∞–∫ –Ω–µ –Ω–∞–∫–∞–∑—ã–≤–∞–ª–∏, –∫–∞–∫ –∑–∞ –∏—Å—Ç–æ—Ä–∏—é —Å –±—Ä–∞–∑–∏–ª—å—Å–∫–∏–º —É–¥–∞–≤–æ–º")

if st.button("–õ–µ–º–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
    if not is_russian(text):
        st.error("‚ùó–û–ë–ù–ê–†–£–ñ–ï–ù–ê –õ–ê–¢–ò–ù–ò–¶–ê –ò/–ò–õ–ò –°–ü–ï–¶–°–ò–ú–í–û–õ–´. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –£–¢–ò–õ–ò–ó–ò–†–û–í–ê–¢–¨‚ùó")
        st.stop()
    
    words = text.split()
    lemmas = []
    unknown_words = []
    
    for word in re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', text):
        try:
            parsed = morph.parse(word)
            if parsed:
                if is_real_word(word):
                    lemmas.append(parsed[0].normal_form)
                else:
                    lemmas.append(f"[{word}]")  # –ü–æ–º–µ—á–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–≤–∞
                    unknown_words.append(word)
        except:
            lemmas.append(word)
    
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
    st.write(" ".join(lemmas))
    
    if unknown_words:
        st.warning(f"üå∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(unknown_words)}")
    
    st.metric("üå∏ –°–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(words))
