import streamlit as st #–∏–º–ø–æ—Ä—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...
from pymorphy3 import MorphAnalyzer #...–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏...
import re #...–∏ –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏

st.title("üå∏ –õ–µ–º–º–∞—Ç–∏–∑–∞—Ç–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞") #—Ç—É—Ç –ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

try: #–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    morph = MorphAnalyzer()
except Exception as e: #–µ—Å–ª–∏ –≤ —Ö–æ–¥–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫–∞...
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}") #...–≤—ã—Å–≤–µ—Ç–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ...
    st.stop() #...–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è

def is_russian(text): #–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–ø–∏—Å–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    russian_letters = re.compile(r'^[–∞-—è–ê-–Ø—ë–Å\s\d\.,!?;:-') #—Å–∞–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, —á–∏—Å–ª–∞ –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    return bool(russian_letters.fullmatch(text))

text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:", #—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –ø–∏—à–µ—Ç—Å—è —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–¥ –Ω–∏–º –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
                   "–ì–∞—Ä—Ä–∏ –Ω–∏–∫–æ–≥–¥–∞ –µ—â–µ —Ç–∞–∫ –Ω–µ –Ω–∞–∫–∞–∑—ã–≤–∞–ª–∏, –∫–∞–∫ –∑–∞ –∏—Å—Ç–æ—Ä–∏—é —Å –±—Ä–∞–∑–∏–ª—å—Å–∫–∏–º —É–¥–∞–≤–æ–º") #–ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ–∫–Ω–µ

if st.button("–õ–µ–º–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å"): #—Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, –∑–∞–¥–∞–µ—Ç—Å—è –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if not is_russian(text): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏/–∏–ª–∏ —Å–∏–º–≤–æ–ª—ã
        st.error("‚ùó–û–ë–ù–ê–†–£–ñ–ï–ù–ê –õ–ê–¢–ò–ù–ò–¶–ê –ò/–ò–õ–ò –°–ü–ï–¶–°–ò–ú–í–û–õ–´. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –£–¢–ò–õ–ò–ó–ò–†–û–í–ê–¢–¨‚ùó") #—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        st.stop()  #–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    
    words = text.split() #–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–¥–µ—Ç –¥–∞–ª—å—à–µ
    lemmas = [] #–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
    
for word in re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', text): #—Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ —Å–ª–æ–≤–∞–º–∏, —á–∏—Å–ª–∞ –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è/—Å–∏–º–≤–æ–ª—ã –Ω–µ–≤–∞–∂–Ω—ã
    try:
        parsed = morph.parse(word) #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–±–æ—Ä–∞ —Å–ª–æ–≤–∞
        if parsed: #–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç - 
            lemmas.append(parsed[0].normal_form) #—Ç–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–π–¥–µ—Ç —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Å–ª–æ–≤–∞
     except:
        lemmas.append(word) #–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è –Ω–∏—á–µ–≥–æ, —Ç–æ —Å–ª–æ–≤–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
    
st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç:") #—Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –Ω–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
st.write(" ".join(lemmas)) #–≤—ã–≤–æ–¥ –≤—Å–µ—Ö –ª–µ–º–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
st.metric("üå∏–°–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(words)) #–∫—Ä–∞—Å–∏–≤–æ–µ –∏ —ç—Å—Ç–µ—Ç–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
